
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
class NRF24L01:
    def __init__(self, spi: Any, cs: Any, ce: Any, channel: Any=, payload_size: Any=) -> None: ...
    def init_spi(self, baudrate: smallint) -> None: ...
    def reg_read(self, reg: Any) -> Any: ...
        #   0: return self.buf[]
        # ? 0: return self.buf[]
    def reg_write_bytes(self, reg: Any, buf: Any) -> Any: ...
        #   0: return self.buf[]
        # ? 0: return self.buf[]
    def reg_write(self, reg: Any, value: Any) -> Any: ...
        #   0: return ret
        # ? 0: return ret
    def flush_rx(self) -> None: ...
    def flush_tx(self) -> None: ...
    def set_power_speed(self, power: Any, speed: Any) -> None: ...
    def set_crc(self, length: Any) -> None: ...
    def set_channel(self, channel: Any) -> None: ...
    def open_tx_pipe(self, address: Any) -> None: ...
    def open_rx_pipe(self, pipe_id: Any, address: Any) -> None: ...
    def start_listening(self) -> None: ...
    def stop_listening(self) -> None: ...
    def any(self) -> bool: ...
    def recv(self) -> Any: ...
        #   0: return buf
        # ? 0: return buf
    def send(self, buf: Any, timeout: Any=) -> None: ...
    def send_start(self, buf: Any) -> None: ...
    def send_done(self) -> None: ...
