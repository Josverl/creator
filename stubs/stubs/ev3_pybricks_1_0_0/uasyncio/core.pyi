
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
class CancelledError: ...
class EventLoop:
    def call_at_() -> None: ...
    def call_later() -> None: ...
    def call_later_ms() -> None: ...
    def call_soon() -> None: ...
    def close() -> None: ...
    def create_task() -> None: ...
    def run_forever() -> None: ...
    def run_until_complete() -> None: ...
    def stop() -> None: ...
    def time() -> None: ...
    def wait() -> None: ...
class IORead:
    def handle() -> None: ...
class IOReadDone:
    def handle() -> None: ...
class IOWrite:
    def handle() -> None: ...
class IOWriteDone:
    def handle() -> None: ...
class SleepMs:
    def handle() -> None: ...
class StopLoop:
    def handle() -> None: ...
class SysCall:
    def handle() -> None: ...
class SysCall1:
    def handle() -> None: ...
def Task() -> None: ...
class TimeoutError: ...
class TimeoutObj: ...
    def add_reader() -> None: ...
    def add_writer() -> None: ...
    def call_at_() -> None: ...
    def call_later() -> None: ...
    def call_later_ms() -> None: ...
    def call_soon() -> None: ...
    def close() -> None: ...
    def create_task() -> None: ...
    def remove_reader() -> None: ...
    def remove_writer() -> None: ...
    def run_forever() -> None: ...
    def run_until_complete() -> None: ...
    def stop() -> None: ...
    def time() -> None: ...
    def wait() -> None: ...
def cancel() -> None: ...
def coroutine() -> None: ...
def ensure_future() -> None: ...
def get_event_loop() -> None: ...
def set_debug() -> None: ...
class type_gen:
    def close() -> None: ...
    def pend_throw() -> None: ...
    def send() -> None: ...
    def throw() -> None: ...
def wait_for() -> None: ...
